<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 공부한 내용 기록용</title>
    <link>/algorithm/</link>
    <description>Recent content in Algorithms on 공부한 내용 기록용</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 10 Jun 2021 02:36:29 +0900</lastBuildDate><atom:link href="/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2021 카카오 블라인드   메뉴 리뉴얼</title>
      <link>/algorithm/2021-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%B8%94%EB%9D%BC%EC%9D%B8%EB%93%9C-%EB%A9%94%EB%89%B4-%EB%A6%AC%EB%89%B4%EC%96%BC/</link>
      <pubDate>Thu, 10 Jun 2021 02:36:29 +0900</pubDate>
      
      <guid>/algorithm/2021-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%B8%94%EB%9D%BC%EC%9D%B8%EB%93%9C-%EB%A9%94%EB%89%B4-%EB%A6%AC%EB%89%B4%EC%96%BC/</guid>
      <description>문제 본문이 굉장히 긴편인데, 한눈에 들어오지도 않아 요구하는 바가 무엇인지 바로 파악하기가 힘들었다.
문제의 요구사항으로는
 문자열에 대해 각 문자로 만들 수 있는 문자열 조합 도출 문자열 조합에 대한 갯수 도출 가장 많이 나온 조합에 대해 알파벳 순으로 출력  비교적 쉬운 수준으로 보이나, 위에서 말했다싶이 문제 본문을 읽고 바로 요구사항이 떠오르질 않는다&amp;hellip;
문제 해결을 위해서 좀 더 풀어서 써보자면&amp;hellip;
 입력으로 받은 각 손님 별 주문 (문자열) 에 대해 부분 문자열 조합 생성 각 부분 문자열에 대한 카운트 저장 및 업데이트 목표 코스 크기 (int) 에 대해 가장 많이 호출된 부분 문자열 찾기 결과 반환을 위해 알파벳 순으로 정렬  정도로 문자열에 대해 목표 크기에 맞는 부분 문자열 조합을 생성 후</description>
      <content>&lt;p&gt;문제 본문이 굉장히 긴편인데, 한눈에 들어오지도 않아 요구하는 바가 무엇인지 바로 파악하기가 힘들었다.&lt;/p&gt;
&lt;p&gt;문제의 요구사항으로는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문자열에 대해 각 문자로 만들 수 있는 문자열 조합 도출&lt;/li&gt;
&lt;li&gt;문자열 조합에 대한 갯수 도출&lt;/li&gt;
&lt;li&gt;가장 많이 나온 조합에 대해 알파벳 순으로 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;비교적 쉬운 수준으로 보이나, 위에서 말했다싶이 문제 본문을 읽고 바로 요구사항이 떠오르질 않는다&amp;hellip;&lt;/p&gt;
&lt;p&gt;문제 해결을 위해서 좀 더 풀어서 써보자면&amp;hellip;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;입력으로 받은 각 손님 별 주문 (문자열) 에 대해 &lt;strong&gt;부분 문자열 조합 생성&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;각 부분 문자열에 대한 카운트 저장 및 업데이트&lt;/li&gt;
&lt;li&gt;목표 코스 크기 (int) 에 대해 &lt;strong&gt;가장 많이 호출된 부분 문자열&lt;/strong&gt; 찾기&lt;/li&gt;
&lt;li&gt;결과 반환을 위해 &lt;strong&gt;알파벳 순으로 정렬&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;정도로 문자열에 대해 목표 크기에 맞는 부분 문자열 조합을 생성 후&lt;/p&gt;
&lt;p&gt;추후 목표 크기에 대한 문자열 조합 갯수 비교를 위해, 저장&lt;/p&gt;
&lt;p&gt;결과 반환을 위해 도출한 부분 문자열 정렬 후 반환을 해야한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;코드-설명&#34;&gt;코드 설명&lt;/h2&gt;
&lt;p&gt;풀이 작성시 핵심이 되는 부분 문자열 생성메소드 부분이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String str&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; order&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 목표 길이에 맞는지 확인		
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cnt &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 결과로 나온 부분 문자열 내부를 알파벳 순에 맞춰 정렬하여 반환 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; foods &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; courseOrderingByAlphabet&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;str&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;			
        &lt;span style=&#34;color:#75715e&#34;&gt;// 정렬을 위해 char[] 로 나온 결과를 다시 스트링 값으로 변경
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        String newCourse &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; createCourseName&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;foods&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 부분 문자열 마다 카운팅을 위해, map객체에 저장.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; courseCnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getOrDefault&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newCourse&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;			
        map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newCourse&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; courseCnt&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 각 코스별 가장 많이 호출된 갯수 저장을 위해 저장.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        isMostFavoriteCourse&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;courseCnt&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;		
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 입력 문자열에 대해 순차적으로 더하여 부분 문자열 생성하며 진행
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; order&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;			
        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; food &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; order&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;			
        create&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;str &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; order&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;		
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;	
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;문자열을 인덱스로 순회하며 문자열의 부분 문자열을 생성하는데, 깔끔하게 메소드를 만들지 못해 아쉽다.&lt;/p&gt;
&lt;p&gt;한 눈에 들어오는 편이 아니기 때문에 추가적인 설명을 남긴다.&lt;/p&gt;
&lt;p&gt;입력 문자열 예시로 &lt;code&gt;ABCDE&lt;/code&gt; 라는 문자열이 들어오고&lt;/p&gt;
&lt;p&gt;목표 부분 문자열 크기로 &lt;code&gt;2&lt;/code&gt; 라고 하자.&lt;/p&gt;
&lt;p&gt;해당 메소드로 처리를 위해, &lt;code&gt;ABCDE&lt;/code&gt; 문자열을 &lt;code&gt;index&lt;/code&gt;로 순회하며 메소드를 호출하게 된다.&lt;/p&gt;
&lt;p&gt;메소드의 파라미터를 여기서 정하였는데&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; - 생성할 부분 문자열&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cnt&lt;/code&gt; - 부분 문자열 크기&lt;/p&gt;
&lt;p&gt;&lt;code&gt;targert&lt;/code&gt; - 목표 부분 문자열크기&lt;/p&gt;
&lt;p&gt;&lt;code&gt;idx&lt;/code&gt; - 입력 문자열에 대한 &lt;code&gt;index&lt;/code&gt; 로 각 문자별 생성을 위해 입력받음&lt;/p&gt;
&lt;p&gt;&lt;code&gt;order&lt;/code&gt; - 전체 문자열 &lt;code&gt;char[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;보다 싶이 파라미터로 받는 변수가 많아, 정확히 어떤 값을 어떻게 처리하는지 바로 파악하는데 어려움이 따른다&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;나중엔 이러지 말자&amp;hellip;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;이후 들어온 문자열을 시작점부터 시작하여 부분 문자열을 생성한다.&lt;/p&gt;
&lt;p&gt;재귀 호출을 통해 생성하는데, 스트링 연산시 새로운 인스턴스가 새롭게 생성되므로&lt;/p&gt;
&lt;p&gt;첫 문자 &lt;code&gt;A&lt;/code&gt; -&amp;gt; 두번째 &lt;code&gt;B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;첫 문자 &lt;code&gt;A&lt;/code&gt; -&amp;gt; 두번째 &lt;code&gt;C&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;와 같은 순서로 생성되어 문자열에 대한 부분 문자열을 생성하게 된다.&lt;/p&gt;
&lt;p&gt;문자열 크기가 목표 크기에 다다르게 되면, 해당 문자열을 각 문자로 분해후 정렬하여&lt;/p&gt;
&lt;p&gt;결과 도출시 문제가 없도록 한 후, 각 문자별 카운팅을 위해 저장한다.&lt;/p&gt;
&lt;p&gt;마음에 안드는 부분 투성이지만 여기까지&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://programmers.co.kr/learn/courses/30/lessons/72411&#34;&gt;문제 링크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.kakao.com/2021/01/25/2021-kakao-recruitment-round-1/&#34;&gt;공식 풀이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>2018 카카오 블라인드   뉴스 클러스터링</title>
      <link>/algorithm/2018-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%B8%94%EB%9D%BC%EC%9D%B8%EB%93%9C-%EB%89%B4%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81/</link>
      <pubDate>Mon, 07 Jun 2021 21:11:05 +0900</pubDate>
      
      <guid>/algorithm/2018-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%B8%94%EB%9D%BC%EC%9D%B8%EB%93%9C-%EB%89%B4%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81/</guid>
      <description>간단히 문제를 요약하자면&amp;hellip;
두 문자열을 받아 영문자에 대한 자카르 유사도를 계산하기
정도로 요약이 되나, 세부적인 사항이 있다.
문제 풀이에 앞서 문제 및 요구사항 정리를 해보자
 입력값으로는 2자 이상 1000자 이하의 두 문자열을 입력 받음 입력값에 대한 자카르 유사도를 출력해야함 입력 문자열은 두 글자씩 끊어서 연산에 사용한다.  이 때, 기타 공백이나 숫자, 특수 문자가 포함될 경우 연산에 사용하지 않는다   대소문자 구별을 하지 않는다.  그렇다면 자카르 유사도 란 무엇일까?</description>
      <content>&lt;p&gt;간단히 문제를 요약하자면&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;두 문자열을 받아 영문자에 대한 자카르 유사도를 계산하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;정도로 요약이 되나, 세부적인 사항이 있다.&lt;/p&gt;
&lt;p&gt;문제 풀이에 앞서 문제 및 요구사항 정리를 해보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력값으로는 2자 이상 1000자 이하의 두 문자열을 입력 받음&lt;/li&gt;
&lt;li&gt;입력값에 대한 자카르 유사도를 출력해야함&lt;/li&gt;
&lt;li&gt;입력 문자열은 두 글자씩 끊어서 연산에 사용한다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이 때, 기타 공백이나 숫자, 특수 문자가 포함될 경우 연산에 사용하지 않는다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대소문자 구별을 하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그렇다면 &lt;code&gt;자카르 유사도&lt;/code&gt; 란 무엇일까?&lt;/p&gt;
&lt;h2 id=&#34;자카르-유사도&#34;&gt;자카르 유사도&lt;/h2&gt;
&lt;p&gt;두 집합 간의 유사도를 검사하느 여러 방법 중 하나로, 수학적 수식으로 표현하면 아래와 같다.&lt;/p&gt;
&lt;p&gt;$$J(A,B) = \frac {|A\cap B|}{|A\cup B|} = \frac {|A\cap B|} {|A| + |B| - |A\cap B| } $$&lt;/p&gt;
&lt;p&gt;교집합을 합집합으로 나눈 값이다.&lt;/p&gt;
&lt;p&gt;그렇다면, 문제에서 자카르 유사도를 어떻게 계산해야 될까?&lt;/p&gt;
&lt;p&gt;문제에서는 두 집합의 경우,&lt;/p&gt;
&lt;p&gt;입력으로 주어지는 두 문자열의 부분 집합으로&lt;/p&gt;
&lt;p&gt;각 문자열을 제약사항(두글자 단위로, 영문만 포함된 문자열)에 맞춰 &lt;strong&gt;중복을 허락&lt;/strong&gt; 하는 집합이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;풀이&#34;&gt;풀이&lt;/h2&gt;
&lt;p&gt;먼저 &lt;code&gt;두 문자&lt;/code&gt; 로 이뤄진 부분집합을 다루기 위해 해당하는 객체를 선언을 해주었다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PartStr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PartStr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// equals and hashcode 생략
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다음으론 문자열을 &lt;code&gt;PartStr&lt;/code&gt; 부분 집합으로 변환하는 메소드를 작성하였는데&lt;/p&gt;
&lt;p&gt;간단하게 문자열을 순회하면서 다음 문자열까지 가져와 둘 다 영문자일 경우에만 부분집합에 추가하였다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PartStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strToCharSet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String str&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PartStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// 결과로 나올 부분 집합
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toUpperCase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// 대소문자를 무시하고 계산하기 위해 전부 대문자로 변환
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;isLetter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;isLetter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Character.isLetter 메소드를 사용하여 검사하였음
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PartStr&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 두 집합을 추출하였으니, 자카르 유사도를 검사를 해야 한다.&lt;/p&gt;
&lt;p&gt;처음 작성시에는 중복 여부에 따른 값 변화를 깊게 생각하질 않아서,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt; 연산을 통해 곂치는 값만 카운팅을 해주었으나,&lt;/p&gt;
&lt;p&gt;중복을 허용하는 집합이기에 다르게 처리를 하였다.&lt;/p&gt;
&lt;p&gt;한 집합(A)에 대해서 순차적으로 확인 후(교집합) 다른 집합(B) 에서 제거하는 형식으로 진행하였다.&lt;/p&gt;
&lt;p&gt;합집합의 경우 $ |A| + |B| - |A\cap B| $ 이기에&lt;/p&gt;
&lt;p&gt;교집합 연산시 처리되지 않는 요소(A)와 제거되지 않은 요소(B)를 모두 더하면 자동으로 나온다.&lt;/p&gt;
&lt;p&gt;그리고 소숫점 5자리까지는 정확히 계산하기 위해 &lt;code&gt;BigDecimal&lt;/code&gt;을 통해 연산을 진행하였다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; 를 사용할시 부정확하게 연산될 가능성이 있기에&lt;/p&gt;
&lt;p&gt;&lt;code&gt;double&lt;/code&gt; 이나 &lt;code&gt;BigDecimal&lt;/code&gt; 을 통해 연산을 하는게 좋아보인다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jaccard&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PartStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; partStrs1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PartStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; partStrs2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//교집합
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PartStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; intersection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 교집합으로 나올 집합
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//합집합
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PartStr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; union &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 합집합으로 나올 결과
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PartStr elem &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; partStrs1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partStrs2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            intersection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            partStrs2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        union&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    union&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partStrs2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    
    BigDecimal intersectionCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
        BigDecimal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;intersection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    BigDecimal unionCount 
        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BigDecimal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;union&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; intersectionCount
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;divide&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;unionCount&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 5&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; RoundingMode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FLOOR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;floatValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 0으로 나뉘는 경우나 연산을 할 수 없는 경우, 문제 내용에 따라 1을 반환하였다.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 1L&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;참고&#34;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://programmers.co.kr/learn/courses/30/lessons/17677&#34;&gt;문제 링크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ddudooo/algorithm/blob/main/programmers30_17677/src/main/java/study/problem/Solution.java&#34;&gt;풀이 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
