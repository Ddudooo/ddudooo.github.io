<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>builder on 공부한 내용 기록용</title>
    <link>/tags/builder/</link>
    <description>Recent content in builder on 공부한 내용 기록용</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 24 Jun 2021 20:44:04 +0900</lastBuildDate><atom:link href="/tags/builder/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>빌더 패턴</title>
      <link>/programming/design-pattern/%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Thu, 24 Jun 2021 20:44:04 +0900</pubDate>
      
      <guid>/programming/design-pattern/%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4/</guid>
      <description>구조  Builder
Prouduct 객체의 요소들을 생성하기 위한 추상 인터페이스를 정의 ConcreateBuilder
Builder에서 정의해둔 인터페이스를 구현 Director
Builder 인터페이스를 사용하는 객체를 합성 Product
빌더패턴을 이용하여 생성된 인스턴스  왜 사용해야 할까?  빌드 패턴은 객체를 생성하는 작업을 분할 하는 데 도움이 된다 ‎일반적으로 복잡한 만들기 논리를 캡슐화할 수 있다 여러 단계와 절차를 통해 객체가 생성된다.
각 단계 및 절차 별로 독립적인 추상화나 관리를 할 수 있음 물체는 준비가되기 전에 일부 지시된 단계에 의해 관리되어야하며 다른 클라이언트가 사용할 수 있다 ‎ 클라이언트 측에서는 추상 인터페이스만 바라보기에 구현 코드를 쉽게 바꿀 수 있다  이펙티브 자바 - 빌더 패턴 일반적으로 빌더 라고 하면 이쪽을 많이 부른다.</description>
      <content>&lt;h2 id=&#34;구조&#34;&gt;구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/images/designPattern/builder/structure.png&#34; alt=&#34;structure.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;&lt;code&gt;Prouduct&lt;/code&gt; 객체의 요소들을 생성하기 위한 추상 인터페이스를 정의&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreateBuilder&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;&lt;code&gt;Builder&lt;/code&gt;에서 정의해둔 인터페이스를 구현&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Director&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;&lt;code&gt;Builder&lt;/code&gt; 인터페이스를 사용하는 객체를 합성&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Product&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;빌더패턴을 이용하여 생성된 인스턴스&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;왜-사용해야-할까&#34;&gt;왜 사용해야 할까?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;빌드 패턴은 객체를 생성하는 작업을 분할 하는 데 도움이 된다&lt;/li&gt;
&lt;li&gt;‎일반적으로 복잡한 만들기 논리를 캡슐화할 수 있다&lt;/li&gt;
&lt;li&gt;여러 단계와 절차를 통해 객체가 생성된다.&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;각 단계 및 절차 별로 독립적인 추상화나 관리를 할 수 있음&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;물체는 준비가되기 전에 일부 지시된 단계에 의해 관리되어야하며 다른 클라이언트가 사용할 수 있다 ‎&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;클라이언트 측에서는 추상 인터페이스만 바라보기에 구현 코드를 쉽게 바꿀 수 있다&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;이펙티브-자바---빌더-패턴&#34;&gt;이펙티브 자바 - 빌더 패턴&lt;/h2&gt;
&lt;p&gt;일반적으로 &lt;code&gt;빌더&lt;/code&gt; 라고 하면 이쪽을 많이 부른다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;생성자에 매개변수가 많다면 빌더를 고려하라&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;객체 생성하는 몇가지 패턴이 존재하는데&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;점층적 생성자 패턴&lt;/li&gt;
&lt;li&gt;자바빈 패턴&lt;/li&gt;
&lt;li&gt;빌더 패턴&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그 중 하나인 빌더 패턴이다&lt;/p&gt;
&lt;p&gt;해당 내용에 대한 글이 아니기에 언급만하고 생략&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://johngrib.github.io/wiki/builder-pattern/#gof-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4&#34;&gt;빌더 패턴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ddudooo/designpattern/tree/main/creation/BuilderPattern&#34;&gt;예제 소스&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
