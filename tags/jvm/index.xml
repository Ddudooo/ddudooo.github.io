<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jvm on 공부한 내용 기록용</title>
    <link>/tags/jvm/</link>
    <description>Recent content in jvm on 공부한 내용 기록용</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 06 Jul 2021 22:05:34 +0900</lastBuildDate><atom:link href="/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JVM(2) - ClassLoader</title>
      <link>/programming/java/jvm2/</link>
      <pubDate>Tue, 06 Jul 2021 22:05:34 +0900</pubDate>
      
      <guid>/programming/java/jvm2/</guid>
      <description>클래스 로더란?  컴파일된 바이트 코드, .class 파일 읽어
class 객체를 생성하여 메모리에 적재하는 역할을 담당하는 객체
 아래에서 소개하는 내용은 내장 클래스 로더 위주로 알아보았다.
클래스 로더 구조 클래스 로더는 계층 구조로 이뤄져 있으며, 기본적으로 세가지 클래스 로더가 제공된다.
 부트 스트랩 클래스 로더
Bootstrap ClassLoader
JAVA_HOME\lib에 있는 코어 자바 API를 제공
최상위 우선순위를 가진 클래스 로더 익스텐션 클래스로더
Extension ClassLoader
JAVA_HOME\lib\ext 폴더 또는 java.ext.dirs
시스템 변수에 해당하는 위치에 있는 클래스를 읽는다.</description>
      <content>&lt;h1 id=&#34;클래스-로더란&#34;&gt;클래스 로더란?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;컴파일된 바이트 코드, &lt;code&gt;.class&lt;/code&gt; 파일 읽어&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class&lt;/code&gt; 객체를 생성하여 메모리에 적재하는 역할을 담당하는 객체&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래에서 소개하는 내용은 내장 클래스 로더 위주로 알아보았다.&lt;/p&gt;
&lt;h2 id=&#34;클래스-로더-구조&#34;&gt;클래스 로더 구조&lt;/h2&gt;
&lt;img src=&#34;/images/java/classloader/structure.png&#34; alt=&#34;structure.png&#34; width=&#34;200 em&#34;/&gt;
&lt;p&gt;클래스 로더는 계층 구조로 이뤄져 있으며,  기본적으로 세가지 클래스 로더가 제공된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부트 스트랩 클래스 로더&lt;br&gt;
&lt;sub class=&#34;tx-sub tx-teal&#34;&gt;Bootstrap ClassLoader&lt;/sub&gt;&lt;br&gt;
&lt;code&gt;JAVA_HOME\lib&lt;/code&gt;에 있는 코어 자바 API를 제공&lt;br&gt;
최상위 우선순위를 가진 클래스 로더&lt;/li&gt;
&lt;li&gt;익스텐션 클래스로더&lt;br&gt;
&lt;sub class=&#34;tx-sub tx-orange&#34;&gt;Extension ClassLoader&lt;/sub&gt;&lt;br&gt;
&lt;code&gt;JAVA_HOME\lib\ext&lt;/code&gt; 폴더 또는 &lt;code&gt;java.ext.dirs&lt;/code&gt;&lt;br&gt;
시스템 변수에 해당하는 위치에 있는 클래스를 읽는다.&lt;/li&gt;
&lt;li&gt;애플리케이션 클래스로더&lt;br&gt;
&lt;sub class=&#34;tx-sub tx-gold&#34;&gt;Application ClassLoader&lt;/sub&gt;&lt;br&gt;
애플리케이션 클래스패스에서 클래스를 읽는다.&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;(애플리케이션 실행할 때 주는 &lt;code&gt;-classpath&lt;/code&gt; 옵션 또는 &lt;code&gt;java.class.path&lt;/code&gt; 환경 변수의 값에 해당하는 위치)&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래는 서버 응용 프로그램의 클래스 로더 구조에 대한 예시이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/java/classloader/classLoaderStructure.png&#34; alt=&#34;classloader-structure.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;after-java-9&#34;&gt;After Java 9&lt;/h3&gt;
&lt;p&gt;Java 9 부터 모듈 시스템 도입에 맞춰 기본 클래스 로더의 이름과 구현 내용등이 바뀌었는데&lt;/p&gt;
&lt;p&gt;자세한 내용은 &lt;a href=&#34;https://homoefficio.github.io/2018/10/13/Java-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0/&#34;&gt;링크&lt;/a&gt;를 확인하도록 하자&lt;br&gt;
&lt;sub class=&#34;tx-sub tx-lightgray&#34;&gt;클래스로더의 전반적인 설명과 원칙 그리고 자바 9 이후 변경점 등을 자세히 설명해주고 있다. &lt;/sub&gt;&lt;/p&gt;
&lt;h1 id=&#34;클래스-로더의-진행-순서&#34;&gt;클래스 로더의 진행 순서&lt;/h1&gt;
&lt;p&gt;자바 응용 프로그램의 실행시, 클래스 로더의 구성 요소별 작동 방식에 대해 알아보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/java/classloader/classloader.png&#34; alt=&#34;classloader.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;클래스 로더는 크게 &lt;code&gt;로딩&lt;/code&gt;, &lt;code&gt;링크&lt;/code&gt;, &lt;code&gt;초기화&lt;/code&gt; 순으로 진행된다.&lt;/p&gt;
&lt;h2 id=&#34;로딩&#34;&gt;로딩&lt;/h2&gt;
&lt;p&gt;클래스 로더가 &lt;code&gt;.class&lt;/code&gt; 파일을 읽고&lt;br&gt;
그 내용에 따라 적절한 바이너리 데이터를 만들고 &lt;code&gt;메소드&lt;/code&gt; 영역에 저장.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이때 메소드 영역에 저장하는 데이터
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Fully Qualified Class Name&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub tx-lightgray&#34;&gt;클래스가 속한 패키지 명을 모두 포함한 이름&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt; | &lt;code&gt;interface&lt;/code&gt; | &lt;code&gt;enum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;메소드와 변수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로딩이 끝나면 해당 클래스 타입의 &lt;code&gt;Class 객체&lt;/code&gt;를 생성하여 &lt;code&gt;힙&lt;/code&gt; 영역에 저장.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Bootstrap ClassLoader&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;자바 런타임 코어 클래스 로드&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Extension ClassLoader&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;Bootstrap Class 부모로 설정, 필요시 부모로 작업 위임&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Application ClassLoader&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;지정된 클래스 패스에 위치한 클래스 로드, Application에 해당되는 클래스들.&lt;/sub&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;순으로 진행된다.&lt;/p&gt;
&lt;h3 id=&#34;classnotfoundexception-noclassdeffounderror&#34;&gt;ClassNotFoundException? NoClassDefFoundError?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ClassNotFoundException&lt;/code&gt; 클래스 로더가 클래스 패스에서 해당 클래스를 찾을 수 없을 경우 발생하는 에러로&lt;/p&gt;
&lt;p&gt;클래스 로더는 기본적으로&lt;br&gt;
&lt;code&gt;Application&lt;/code&gt; -&amp;gt; &lt;code&gt;Extension&lt;/code&gt; -&amp;gt; &lt;code&gt;Bootstrap&lt;/code&gt; 
순으로 클래스를 찾게 되는데,&lt;/p&gt;
&lt;p&gt;모두 진행 후 찾을 수 없는 경우 예외가 발생하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NoClassDefFoundError&lt;/code&gt; 
컴파일 타임에는 클래스가 존재하지만&lt;/p&gt;
&lt;p&gt;런타임 당시에 클래스의 변경으로 인해 클래스의 스태틱 초기화 등으로&lt;/p&gt;
&lt;p&gt;런타임 당시에 클래스를 찾을 수 없는 경우 예외를 발생하게 된다.&lt;/p&gt;
&lt;h2 id=&#34;링크&#34;&gt;링크&lt;/h2&gt;
&lt;p&gt;링크의 경우 &lt;code&gt;Verify&lt;/code&gt;, &lt;code&gt;Prepare&lt;/code&gt;, &lt;code&gt;Resolve&lt;/code&gt; 세단계로 나눠져 있으며, 아래와 같은 순서로 진행된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Verify&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;검증, &lt;code&gt;.class&lt;/code&gt; 파일 형식이 유효한지 체크&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Prepare&lt;/code&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;클래스 변수 (static 변수) 와 기본값에 필요한 메모리를 준비하는 과정&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Resolve&lt;/code&gt; &lt;sub class=&#34;tx-royalblue&#34;&gt;(optional)&lt;/sub&gt;&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;심볼릭 메모리 레퍼런스를 메소드 영역에 있는 실제 레퍼런스로 교체&lt;br&gt;
이과정에서 진행 될 수 있고, 실제 메소드를 실행당시에 실행될 수도 있음.&lt;/sub&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;초기화&#34;&gt;초기화&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Static&lt;/code&gt; 변수의 값 할당, &lt;code&gt;static&lt;/code&gt; 블럭이 있을 경우 이때 실행된다.&lt;/p&gt;
&lt;h1 id=&#34;마치며&#34;&gt;마치며&lt;/h1&gt;
&lt;p&gt;클래스 로더는 &lt;code&gt;Java&lt;/code&gt; 프로그램을 실행하는 데 필수적이며&lt;/p&gt;
&lt;p&gt;내부적으로 사용되는 &lt;code&gt;Bootstrap&lt;/code&gt; 클래스 로더는&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;다른 클래스 로더의 부모, 최상위 루트 클래스 로더 역할이며 JDK 내부 클래스를 로드합니다&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Extension&lt;/code&gt;, &lt;code&gt;Application&lt;/code&gt; 클래스 로더는&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;각각 Java 확장 디렉토리와 클래스 경로에서 클래스를 로드합니다&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;참고&#34;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/java-classloaders&#34;&gt;Baeldung::java-classloader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inflearn.com/course/the-java-code-manipulation&#34;&gt;더 자바, 코드를 조작하는 다양한 방법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://homoefficio.github.io/2018/10/13/Java-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0/&#34;&gt;Java 클래스로더 훑어보기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>JVM</title>
      <link>/programming/java/jvm/</link>
      <pubDate>Tue, 29 Jun 2021 18:15:41 +0900</pubDate>
      
      <guid>/programming/java/jvm/</guid>
      <description>Java Virtual Machine, JVM 이란?  자바 응용 프로그램을 실행시키기 위한 가상 머신으로 자바를 실행시키기 위한 프로그램
 일반적으로 다른 프로그래밍 언어의 경우,
컴파일러를 통해 컴파일할 때, 특정 시스템에 종속적인 결과물이 나오게 되어 있다
반면, Java 컴파일러는 JVM, Java Virtual Machine 에 대한 결과물을 생성한다.
이를 통해, 다른 플랫폼이나 환경이 다를 지라도 JVM만 있다면 동일한 결과물을 얻을 수 있게 되었다.
좀 더 자세히 살펴보자면
Java 컴파일러는 .java 파일을 .class 파일로 컴파일을 하게 되는데</description>
      <content>&lt;h1 id=&#34;java-virtual-machine-jvm-이란&#34;&gt;&lt;code&gt;Java Virtual Machine&lt;/code&gt;, &lt;code&gt;JVM&lt;/code&gt; 이란?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;자바 응용 프로그램을 실행시키기 위한 가상 머신으로 자바를 실행시키기 위한 프로그램&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일반적으로 다른 프로그래밍 언어의 경우,&lt;/p&gt;
&lt;p&gt;컴파일러를 통해 컴파일할 때, 특정 시스템에 종속적인 결과물이 나오게 되어 있다&lt;/p&gt;
&lt;p&gt;반면, &lt;code&gt;Java&lt;/code&gt; 컴파일러는 &lt;code&gt;JVM&lt;/code&gt;, &lt;code&gt;Java Virtual Machine&lt;/code&gt; 에 대한 결과물을 생성한다.&lt;/p&gt;
&lt;p&gt;이를 통해, 다른 플랫폼이나 환경이 다를 지라도 &lt;code&gt;JVM&lt;/code&gt;만 있다면 동일한 결과물을 얻을 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;좀 더 자세히 살펴보자면&lt;/p&gt;
&lt;p&gt;Java 컴파일러는 &lt;code&gt;.java&lt;/code&gt; 파일을 &lt;code&gt;.class&lt;/code&gt; 파일로 컴파일을 하게 되는데&lt;/p&gt;
&lt;p&gt;이 &lt;code&gt;.class&lt;/code&gt; 파일이 &lt;code&gt;JVM&lt;/code&gt;에 입력되어 로드되고 실행되게 된다.&lt;/p&gt;
&lt;h2 id=&#34;jvm의-구조&#34;&gt;JVM의 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/images/java/jvm/JVM-Architecture.png&#34; alt=&#34;structure.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 구조도를 참고하여 보자면&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt;은 크게 세가지 영역으로 이루어져 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;클래스 로더&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;ClassLoader Subsystem&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;런타임 데이터 영역&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;Runtime Data Area&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;실행 엔진&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;Execution Engine&lt;/sub&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;각각 영역에 대한 자세한 내용은 차차 다루도록 하고&lt;/p&gt;
&lt;p&gt;무슨 역할을 하는지 간략하게 알아보자&lt;/p&gt;
&lt;h3 id=&#34;클래스-로더&#34;&gt;클래스 로더&lt;/h3&gt;
&lt;p&gt;자바의 경우 동적으로 클래스를 읽어온다.
&lt;/br&gt;&lt;strong&gt;&lt;sub class=&#34;tx-sub tx-orange&#34;&gt;Dynamic Class Loading 동적 클래스 로딩&lt;/sub&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;런타임 상에 모든 코드가 JVM 상에 링크된다는 것인데, 좀 더 풀어서 설명하자면&lt;/p&gt;
&lt;p&gt;앞서 설명처럼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;자바 프로그램이 실행될 때, 컴파일된 &lt;code&gt;class&lt;/code&gt; 파일로 입력되고 실행&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;해당 역할을 담당하는 시스템 모듈이다.&lt;/p&gt;
&lt;h3 id=&#34;런타임-데이터-영역&#34;&gt;런타임 데이터 영역&lt;/h3&gt;
&lt;p&gt;흔히 말하길 &lt;code&gt;메모리 영역&lt;/code&gt;이라고도 불리는 영역이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JVM 상에서 사용되는 데이터들을 적재하는 영역&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;메소드, 힙, 스택, PC Register, 네이티브 메소드 스택(&lt;code&gt;JNI&lt;/code&gt;) 등이 있다.&lt;/p&gt;
&lt;h3 id=&#34;실행-엔진&#34;&gt;실행 엔진&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;런타임 데이터 영역에 할당된 바이트코드를 실행시킨다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;실행 엔진은 바이트 코드를 읽어 명령어 단위로 실행시킨다.&lt;/p&gt;
&lt;p&gt;명령어 실행은 두 방식으로 나뉘어 실행되는데&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;인터프리터&lt;/li&gt;
&lt;li&gt;JIT 컴파일러&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 두가지 방식으로 실행된다.&lt;/p&gt;
&lt;p&gt;추가적으로 실행엔진에서 &lt;code&gt;GC&lt;/code&gt;라고 흔히 부르는&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Garbage Collector&lt;/code&gt;가 동작하여 불필요한 리소스를 반환한다.&lt;/p&gt;
&lt;h2 id=&#34;jre-jdk&#34;&gt;JRE? JDK?&lt;/h2&gt;
&lt;p&gt;JVM 구현체를 포함한 녀석들이다.&lt;/p&gt;
&lt;p&gt;흔히 말하는 &lt;code&gt;자바 다운로드&lt;/code&gt;, &lt;code&gt;자바 개발 환경 설정&lt;/code&gt;을 할때, 나오는 녀석들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JRE
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;J&lt;/code&gt;ava &lt;code&gt;R&lt;/code&gt;untime &lt;code&gt;E&lt;/code&gt;nvironment 자바 실행 환경의 약자&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JVM&lt;/code&gt; + &lt;code&gt;Library&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;실행 관련 핵심 부분을 포함하고 있다&lt;/li&gt;
&lt;li&gt;개발 관련 도구 ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JDK
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;J&lt;/code&gt;ava &lt;code&gt;D&lt;/code&gt;evelopment &lt;code&gt;K&lt;/code&gt;it 자바 개발도구의 약자&lt;/li&gt;
&lt;li&gt;JRE + 개발 관련 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;자바-코드-실행-흐름&#34;&gt;자바 코드 실행 흐름&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;프로그램 실행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JVM&lt;/code&gt;이 &lt;code&gt;OS&lt;/code&gt;로부터 메모리 할당&lt;br&gt;
&lt;sub class=&#34;tx-sub&#34;&gt;이 때 JVM이 할당 받은 메모리를 여러 영역으로 나누어 관리&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;자바 컴파일러가 &lt;code&gt;class&lt;/code&gt; 파일로 컴파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;클래스 로더&lt;/code&gt;를 통해 &lt;code&gt;JVM&lt;/code&gt;으로 로딩&lt;/li&gt;
&lt;li&gt;로딩된 &lt;code&gt;class&lt;/code&gt; 파일은 &lt;code&gt;실행 엔진&lt;/code&gt;을 통해 해석 및 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/jvm-architecture-explained&#34;&gt;JVM architecture-explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wikidocs.net/257&#34;&gt;JVM, JRE, JDK의 차이&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slipp.net/wiki/pages/viewpage.action?pageId=8880250&#34;&gt;SLiPP::위키 1장 - Java Virtual Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_virtual_machine&#34;&gt;wikipedia - Java_virtual_machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
